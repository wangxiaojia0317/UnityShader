存在这里主要是为了方便查找：

引用了别人的总结：

 

一、内置包含文件

　　Unity中有类似于C++的包含文件.cginc，在编写Shader时我们可以使用#include指令把这些文件包含进来
这样我们就可以使用Unity为我们提供的一些非常好用的函数、宏和变量。

例如：#include"UnityCG.cginc"

包含文件的位置：根目录\Editor\Data\CGIncludes

知识点1：以下是Unity中常用包含文件：
　　文件名 描述
　　1、UnityCG.cginc 包含最常用的帮助函数、宏和结构体
　　2、UnityShaderVariables.cginc 在编译Shader时，会被自动包含进来，包含了许多内置的全局变量，如UNITY_MATRIX_MVP
　　3、Ligghting.cginc 包含了各种内置光照模型，如果编写SurfaceShader的话，会被自动包含进来
　　4、HLSLSurport.cginc 在编译Shader时，会被自动包含进来，声明了很多跨平台编译的宏和定义

　　Unity5.2引入了许多新的重要的包含文件，如UnityStandardBRDF.cginc等。这些文件用于实现基于物理的渲染



二：UnityShader中常用的结构体

　　　　名称 　　　　　　　　 描述 　　　　　　　　　　　　　包含的变量
　　appdata_base 　　　　用于顶点着色器输入 　　　　 顶点位置、顶点法线、第一组纹理坐标
　　appdata_tan 　　　　 用于顶点着色器输入 　　　　 顶点位置、顶点切线、顶点法线、第一组纹理坐标
　　appdata_full 　　　　用于顶点着色器输入 　　　　 顶点位置、顶点切线、顶点法线、四组（或更多）纹理坐标
　　appdata_img 　　　　 用于顶点着色器输入 　　　　 顶点位置、第一组纹理坐标
　　v2f_img 　　　　　　 用于顶点着色器输出 　　　　 裁剪空间中的位置、纹理坐标

struct appdata_img
{
　　float4 vertex : POSITION;
　　half2 texcoord : TEXCOORD0;
};

struct appdata_base 
{
　　float4 vertex : POSITION;
　　float3 normal : NORMAL;
　　float4 texcoord : TEXCOORD0;
};

struct appdata_tan 
{
　　float4 vertex : POSITION;
　　float4 tangent : TANGENT;
　　float3 normal : NORMAL;
　　float4 texcoord : TEXCOORD0;
};

struct appdata_full 
{
　　float4 vertex : POSITION;
　　float4 tangent : TANGENT;
　　float3 normal : NORMAL;
　　float4 texcoord : TEXCOORD0;
　　float4 texcoord1 : TEXCOORD1;
　　float4 texcoord2 : TEXCOORD2;
　　float4 texcoord3 : TEXCOORD3;
#if defined(SHADER_API_XBOX360)
　　half4 texcoord4 : TEXCOORD4;
　　half4 texcoord5 : TEXCOORD5;
#endif
　　fixed4 color : COLOR;
};

struct v2f_img
{
　　float4 pos : SV_POSITION;
　　half2 uv : TEXCOORD0;
};

三：UnityShader中常用的帮助函数

　　　　　　函数名 　　　　　　　　　　　　　　　　　　　　 描    述
float3 WorldSpaceViewDir(float4 v) 　　　　 　　  输入一个模型顶点坐标，得到世界空间中从该点到摄像机的观察方向
float3 ObjSpaceViewDir(float4 v) 　　　　　　 　  输入一个模型顶点坐标，得到模型空间中从该点到摄像机的观察方向
float3 WorldSpaceLightDir(float4 v) 　　　　　　   输入一个模型顶点坐标，得到世界空间中从该点到光源的光照方向（方向没有归一化，且只可用于前向渲染）
float3 ObjSpaceLightDir(float4 v) 　　　　　　 　  输入一个模型顶点坐标，得到模型空间中从该点到光源的光照方向（方向没有归一化，且只可用于前向渲染）
float3 UnityObjectToWorldNormal(float3 norm)　　将法线从模型空间转换到世界空间
float3 UnityObjectToWorldDir(in float3 dir) 　　　   把方向矢量从模型空间转换到世界空间
float3 UnityWorldToObjectDir(float3 dir) 　　　　   把方向矢量从世界空间转换到模型空间

四：UnityShader中内置变量
                                                                     Unity内置变换矩阵
           变量名                                                                             描         述
UNITY_MATRIX_MVP 　　　　     当前模型*观察*投影矩阵，用于将模型顶点/方向矢量从模型空间转换到裁剪空间
UNITY_MATRIX_MV 　　　　　   当前模型*观察矩阵，用于将模型顶点/方向矢量从模型空间转换到观察空间
UNITY_MATRIX_V 　　　　　　  当前观察矩阵，用于将顶点/方向矢量从世界空间变换到观察空间
UNITY_MATRIX_P 　　　　　　  当前投影矩阵，用于将顶点/方向矢量从观察空间变换到裁剪空间
UNITY_MATRIX_VP 　　　　　　当前观察*投影矩阵，用于将顶点/方向矢量从世界空间变换到裁剪空间
UNITY_MATRIX_T_MV 　　　　  UNITY_MATRIX_MV转置矩阵
UNITY_MATRIX_IT_MV 　　　　 UNITY_MATRIX_MV逆转置矩阵，可将法线矢量从模型空间转换到观察空间
_Object2World 　　　　　　　　 当前模型的矩阵，用于将模型顶点/方向矢量从模型空间转换到世界空间
_World2Object 　　　　　　         _Object2World逆矩阵，用于将模型顶点/方向矢量从世界空间转换到模型空间

另外：Unity还提供了能够访问时间、光照、雾效和环境光等目的的变量。这些内置变量大多UnityShaderVariables.cginc中，
跟光照有关的还定义在Lighting.cginc 和AutoLight.cginc中。

五：

1、uint CreateShader(enum type) : 创建空的shader object; 
  type: VERTEX_SHADER, 
2、void ShaderSource(uint shader, sizeicount, const **string, const int *length)：加载shader源码进shader object；可能多个字符串 
3、void CompileShader(uint shader)：编译shader object； 
  shader object有状态 表示编译结果 
4、void DeleteShader( uint shader )：删除 shader object; 
5、void ShaderBinary( sizei count, const uint *shaders, 
enum binaryformat, const void *binary, sizei length ): 加载预编译过的shader 二进制串； 
6、uint CreateProgram( void )：创建空的program object， programe object组织多个shader object，成为executable; 
7、void AttachShader( uint program, uint shader )：关联shader object和program object； 
8、void DetachShader( uint program, uint shader )：解除关联； 
9、void LinkProgram( uint program )：program object准备执行，其关联的shader object必须编译正确且符合限制条件； 
10、void UseProgram( uint program )：执行program object； 
11、void ProgramParameteri( uint program, enum pname, 
int value )： 设置program object的参数； 
12、void DeleteProgram( uint program )：删除program object； 
13、shader 变量的qualifier: 
   默认：无修饰符，普通变量读写， 与外界无连接； 
   const：常量 const vec3 zAxis = vec3(0.0, 0.0, 1.0); 
   attribute: 申明传给vertex shader的变量；只读；不能为array或struct；attribute vec4 position; 
   uniform: 表明整个图元处理中值相同；只读； uniform vec4 lightPos; 
   varying: 被差值；读写； varying vec3 normal; 
   in, out, inout; 


shader变量的精度： 
   highp, mediump, lowp 

shader内置变量： 
   gl_Position: 用于vertex shader, 写顶点位置；被图元收集、裁剪等固定操作功能所使用； 
                其内部声明是：highp vec4 gl_Position; 
   gl_PointSize: 用于vertex shader, 写光栅化后的点大小，像素个数； 
                其内部声明是：mediump float gl_Position; 
   gl_FragColor: 用于Fragment shader，写fragment color；被后续的固定管线使用； 
                 mediump vec4 gl_FragColor; 
   gl_FragData: 用于Fragment shader，是个数组，写gl_FragData[n] 为data n；被后续的固定管线使用； 
                 mediump vec4 gl_FragData[gl_MaxDrawBuffers]; 
   gl_FragColor和gl_FragData是互斥的，不会同时写入； 
   gl_FragCoord: 用于Fragment shader,只读， Fragment相对于窗口的坐标位置 x,y,z,1/w; 这个是固定管线图元差值后产生的；z 是深度值; mediump vec4 gl_FragCoord; 
   gl_FrontFacing: 用于判断 fragment是否属于 front-facing primitive；只读； 
                   bool gl_FrontFacing;   
   gl_PointCoord: 仅用于 point primitive; mediump vec2 gl_PointCoord; 


shader内置常量： 
   const mediump int gl_MaxVertexAttribs = 8; 
   const mediump int gl_MaxVertexUniformVectors = 128; 
   const mediump int gl_MaxVaryingVectors = 8; 
   const mediump int gl_MaxVertexTextureImageUnits = 0; 
   const mediump int gl_MaxCombinedTextureImageUnits = 8; 
   const mediump int gl_MaxTextureImageUnits = 8; 
   const mediump int gl_MaxFragmentUnitformVectors = 16; 
   const mediump int gl_MaxDrawBuffers = 1; 


shader内置数学函数： 
   一般默认都用弧度； 
   radians(degree) : 角度变弧度； 
   degrees(radian) : 弧度变角度； 
   sin(angle), cos(angle), tan(angle) 
   asin(x): arc sine, 返回弧度 [-PI/2, PI/2]; 
   acos(x): arc cosine,返回弧度 [0, PI]; 
   atan(y, x): arc tangent, 返回弧度 [-PI, PI]; 
   atan(y/x): arc tangent, 返回弧度 [-PI/2, PI/2]; 
  
   pow(x, y): x的y次方； 
   exp(x): 指数, log(x)： 
   exp2(x): 2的x次方， log2(x): 
   sqrt(x): x的根号； inversesqrt(x): x根号的倒数 
  
   abs(x): 绝对值 
   sign(x): 符号, 1, 0 或 -1 

    {sign(x)或者Sign(x)叫做符号函数，在数学和计算机运算中，其功能是取某个数的符号(正或负): 
    当x>0，sign(x)=1; 
    当x=0，sign(x)=0; 
    当x<0， sign(x)=-1;}    floor(x): 底部取整 
   ceil(x): 顶部取整 
   fract(x): 取小数部分 
   mod(x, y): 取模， x - y*floor(x/y) 
   min(x, y): 取最小值 
   max(x, y): 取最大值 
   clamp(x, min, max):  min(max(x, min), max); 
   mix(x, y, a): x, y的线性混叠， x(1-a) + y*a; 
   step(edge, x): 如 x 
   smoothstep(edge0, edge1, x): threshod  smooth transition时使用。 edge0<=edge0时为0.0， x>=edge1时为1.0 
  
   length(x): 向量长度 
   distance(p0, p1): 两点距离， length(p0-p1); 
   dot(x, y): 点积，各分量分别相乘 后 相加 
   cross(x, y): 差积，x[1]*y[2]-y[1]*x[2], x[2]*y[0] - y[2]*x[0], x[0]*y[1] - y[0]*x[1] 
   normalize(x): 归一化， length(x)=1; 
   faceforward(N, I, Nref): 如 dot(Nref, I)< 0则N, 否则 -N 
   reflect(I, N): I的反射方向， I -2*dot(N, I)*N, N必须先归一化 
   refract(I, N, eta): 折射，k=1.0-eta*eta*(1.0 - dot(N, I) * dot(N, I)); 如k<0.0 则0.0，否则 eta*I - (eta*dot(N, I)+sqrt(k))*N 
  
   matrixCompMult(matX, matY): 矩阵相乘, 每个分量 自行相乘， 即 r[j] = x[j]*y[j]; 
                              矩阵线性相乘，直接用 * 
    
   lessThan(vecX, vecY): 向量 每个分量比较 x < y 
   lessThanEqual(vecX, vecY): 向量 每个分量比较 x<=y 
   greaterThan(vecX, vecY): 向量 每个分量比较 x>y 
   greaterThanEqual(vecX, vecY): 向量 每个分量比较 x>=y 
   equal(vecX, vecY): 向量 每个分量比较 x==y 
   notEqual(vecX, vexY): 向量 每个分量比较 x!=y 
   any(bvecX): 只要有一个分量是true， 则true 
   all(bvecX): 所有分量是true， 则true 
   not(bvecX): 所有分量取反 
  
   texture2D(sampler2D, coord): texture lookup 
   texture2D(sampler2D, coord, bias): LOD bias, mip-mapped texture 
   texture2DProj(sampler2D, coord): 
   texture2DProj(sampler2D, coord, bias): 
   texture2DLod(sampler2D, coord, lod): 
   texture2DProjLod(sampler2D, coord, lod): 
   textureCube(samplerCube, coord): 
   textureCube(samplerCube, coord, bias): 
   textureCubeLod(samplerCube, coord, lod): 

 

CG：

（1）数学函数
函数	功能描述
abs(x)	返回输入参数的绝对值
acos(x)	反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值
all(x)	如果输入参数均不为0，则返回ture； 否则返回flase。&&运算
any(x)	输入参数只要有其中一个不为0，则返回true。
asin(x)	反正弦函数,输入参数取值区间为，返回角度值范围为, 
atan(x)	反正切函数，返回角度值范围为
atan2(y,x)	计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。
ceil(x)	对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0
clamp(x,a,b)	如果x值小于a，则返回a；
如果x值大于b，返回b；
否则，返回x。
cos(x)	返回弧度x的余弦值。返回值范围为
cosh(x)	双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。
cross(A,B)	返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！
degrees(x)	输入参数为弧度值(radians)，函数将其转换为角度值(degrees)
determinant(m)	计算矩阵的行列式因子。
dot(A,B)	返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。
exp(x)	计算的值，e=2.71828182845904523536
exp2(x)	计算的值
floor(x)	对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。
fmod(x,y)	返回x/y的余数。如果y为0，结果不可预料。
frac(x)	返回标量或矢量的小数
frexp(x, out i)	将浮点数x分解为尾数和指数，即， 返回m，并将指数存入i中；如果x为0，则尾数和指数都返回0
isfinite(x)	判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;
isinf(x)	判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;
isnan(x)	判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;
ldexp(x, n)	计算的值
lerp(a, b, f)	计算或者的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。
lit(NdotL, NdotH, m)	N表示法向量；
L表示入射光向量；
H表示半角向量；
m表示高光系数。 
函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 
X位表示环境光的贡献，总是1.0; 
Y位代表散射光的贡献，如果 ，则为0；否则为 
Z位代表镜面光的贡献，如果 或者，则位0；否则为;
W位始终位1.0
log(x)	计算的值，x必须大于0
log2(x)	计算的值，x必须大于0
log10(x)	计算的值，x必须大于0
max(a, b)	比较两个标量或等长向量元素，返回最大值。
min(a,b)	比较两个标量或等长向量元素，返回最小值。
modf(x, out ip)	把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回
mul(M, N)	矩阵M和矩阵N的积，计算方法如下
mul(M, v)	矩阵M和列向量v的积，公式如下
mul(v, M)	行向量v和矩阵M的积，公式如下
noise(x)	根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样
pow(x, y)	 
radians(x)	函数将角度值转换为弧度值
round(x)	返回四舍五入值。
rsqrt(x)	x的平方根的倒数，x必须大于0
saturate(x)	把x限制到[0,1]之间
sign(x)	如果则返回1；否则返回0
sin(x)	输入参数为弧度，计算正弦值，返回值范围 为[-1,1]
sincos(float x, out s, out c)	该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!
sinh(x)	计算x的双曲正弦
smoothstep(min, max, x)	值x位于min、max区间中。如果x=min，返回0；如果x=max，返回1；如果x在两者之间，按照下列公式返回数据：
step(a, x)	如果，返回0；否则，返回1
sqrt(x)	求x的平方根，，x必须大于0
tan(x)	计算x正切值
tanh(x)	计算x的双曲线切线
transpose(M)	矩阵M的转置矩阵
如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等
 

（2）几何函数
函数	功能描述
distance(pt1, pt2)	两点之间的欧几里德距离（Euclidean distance）
faceforward(N,I,Ng)	如果，返回N；否则返回-N。
length(v)	返回一个向量的模，即sqrt(dot(v,v))
normalize(v)	返回v向量的单位向量
reflect(I, N)	根据入射光纤方向I和表面法向量N计算反射向量，仅对三元向量有效
refract(I,N,eta)	根据入射光线方向I，表面法向量N和折射相对系数eta,计算折射向量。如果对给定的eta,I和N之间的角度太大，返回(0,0,0)。
只对三元向量有效
 

（3）纹理映射函数
函数	功能描述
tex1D(sampler1D tex, float s)	一维纹理查询
tex1D(sampler1D tex, float s, float dsdx, float dsdy)	使用导数值（derivatives）查询一维纹理
Tex1D(sampler1D tex, float2 sz)	一维纹理查询，并进行深度值比较
Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy)	使用导数值（derivatives）查询一维纹理， 并进行深度值比较
Tex1Dproj(sampler1D tex, float2 sq)	一维投影纹理查询
Tex1Dproj(sampler1D tex, float3 szq)	一维投影纹理查询，并比较深度值
Tex2D(sampler2D tex, float2 s)	二维纹理查询
Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)	使用导数值（derivatives）查询二维纹理
Tex2D(sampler2D tex, float3 sz)	二维纹理查询，并进行深度值比较
Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy)	使用导数值（derivatives）查询二维纹理，并进行深度值比较
Tex2Dproj(sampler2D tex, float3 sq)	二维投影纹理查询
Tex2Dproj(sampler2D tex, float4 szq)	二维投影纹理查询，并进行深度值比较
texRECT(samplerRECT tex, float2 s)	二维非投影矩形纹理查询（OpenGL独有）
texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)	二维非投影使用导数的矩形纹理查询（OpenGL独有）
texRECT (samplerRECT tex, float3 sz)	二维非投影深度比较矩形纹理查询（OpenGL独有）
texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)	二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）
texRECT proj(samplerRECT tex, float3 sq)	二维投影矩形纹理查询（OpenGL独有）
texRECT proj(samplerRECT tex, float3 szq)	二维投影矩形纹理深度比较查询（OpenGL独有）
Tex3D(sampler3D tex, float s)	三维纹理查询
Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)	结合导数值（derivatives）查询三维纹理
Tex3Dproj(sampler3D tex, float4 szq)	查询三维投影纹理，并进行深度值比较
texCUBE(samplerCUBE tex, float3 s)	查询立方体纹理
texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)	结合导数值（derivatives）查询立方体纹理
texCUBEproj (samplerCUBE tex, float4 sq)	查询投影立方体纹理

在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:

s表示这是一个一元、二元或三元纹理坐标。
z表示这是一个用来进行阴影贴图查找的深度比较值。
q表示这是一个透视值，在进行纹理查找之前，它被用来除以纹理坐标（s）。
当你使用的纹理函数允许你指定一个深度比较值的时候，与之相关联的纹理单元必须被设置成深度比较纹理。否则，深度比较实际上不会被执行。 
 

（4）偏导函数
函数	功能描述
ddx(a)	近似a关于屏幕空间x轴的偏导数
ddy(a)	近似a关于屏幕空间y轴的偏导数